// Copyright (c) 2021, Odroe Inc. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.
//------------------------------------------------------------------------------
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String  @id @db.Char(64)
  username String? @unique @db.VarChar(100)
  email    String? @unique @db.VarChar(100)
  phone    String? @unique @db.VarChar(100)
  password String?

  /// The user published moments
  PublishedMoment Moment[]

  /// The user created access tokens.
  AccessToken AccessToken[]

  /// The user profile
  Profile UserProfile?

  /// The user liked one to many moments
  LikeOnMoment LikeOnMoment[]

  /// The user published one to many comments.
  Comment Comment[]

  /// The user uploaded storages.
  Storage Storage[]

  /// Following
  following FollowOnUser[] @relation(name: "follow:user")

  /// Followers
  followers FollowOnUser[] @relation(name: "user:following")

  @@index([username])
  @@index([email])
  @@index([phone])
}

model FollowOnUser {
  userId      String   @db.Char(64)
  followingId String   @db.Char(64)
  createdAt   DateTime @default(now()) @db.Timestamp

  user      User @relation(name: "follow:user", fields: [userId], references: [id])
  following User @relation(name: "user:following", fields: [followingId], references: [id])

  @@id([userId, followingId])
}

model AccessToken {
  token            String   @id @db.Char(128)
  userId           String   @db.Char(64)
  createdAt        DateTime @default(now()) @db.Timestamp
  expiredAt        DateTime @db.Timestamp
  refreshExpiredAt DateTime @db.Timestamp

  /// The access token belongs to user.
  Owner User @relation(fields: [userId], references: [id])

  @@index([createdAt])
  @@index([expiredAt])
  @@index([refreshExpiredAt])
}

enum OneTimePasswordType {
  EMAIL
  SMS
}

model OneTimePassword {
  type      OneTimePasswordType
  value     String              @db.VarChar(100)
  otp       String              @db.VarChar(100)
  createdAt DateTime            @default(now()) @db.Timestamp
  expiredAt DateTime            @db.Timestamp

  @@id([type, value, otp])
  @@index([createdAt])
  @@index([type])
  @@index([value])
  @@index([otp])
}

enum UserGender {
  UNKNOWN
  WOMAN
  MAN
}

model UserProfile {
  userId          String     @id @db.Char(64)
  avatarStorageId String?    @unique @db.Char(64)
  bio             String?    @db.Text
  gender          UserGender @default(UNKNOWN)
  birthday        Int?       @db.Integer

  Owner User @relation(fields: [userId], references: [id])

  @@index([avatarStorageId])
  @@index([gender])
  @@index([birthday])
}

model Moment {
  id        String   @id @db.Char(64)
  userId    String   @db.Char(64)
  title     String?  @db.VarChar(255)
  content   String?  @db.Text
  createdAt DateTime @default(now()) @db.Timestamp

  /// The moment has one to many images storage.
  storages StorageOnMoment[]

  /// The moment belongs to user.
  user User @relation(fields: [userId], references: [id])

  /// The moment likers, moment many to many users.
  likers LikeOnMoment[]

  /// The moment comments.
  comments CommentOnMoment[]

  @@index([createdAt])
  @@index([userId])
  @@index([title])
}

model LikeOnMoment {
  userId    String   @db.Char(64)
  momentId  String   @db.Char(64)
  createdAt DateTime @default(now()) @db.Timestamp

  /// The like belongs to user.
  User User @relation(fields: [userId], references: [id])

  /// The like belongs to moment.
  Moment Moment @relation(fields: [momentId], references: [id])

  @@id([userId, momentId])
  @@index([createdAt])
}

model Comment {
  id        String   @id @db.Char(64)
  content   String   @db.Text
  userId    String   @db.Char(64)
  createdAt DateTime @default(now()) @db.Timestamp

  /// The comment belongs to user.
  User User @relation(fields: [userId], references: [id])

  /// The comment belongs to moment.
  CommentOnMoment CommentOnMoment[]

  @@index([createdAt])
  @@index([userId])
}

model CommentOnMoment {
  commentId String @id @db.Char(64)
  momentId  String @db.Char(64)

  /// Belongs to moment.
  Moment Moment @relation(fields: [momentId], references: [id])

  /// Belongs to comment.
  Comment Comment @relation(fields: [commentId], references: [id])

  @@unique([commentId, momentId])
  @@index([commentId])
}

model Storage {
  id         String   @id @db.Char(64)
  location   String   @unique
  isUploaded Boolean  @default(false)
  createdAt  DateTime @default(now()) @db.Timestamp
  userId     String   @db.Char(64)

  /// The storage belongs to user.
  User User @relation(fields: [userId], references: [id])

  /// The storage image belongs to moment.
  StorageOnMoment StorageOnMoment?

  @@index([isUploaded])
  @@index([userId])
}

model StorageOnMoment {
  storageId String @id @db.Char(64)
  momentId  String @db.Char(64)

  Storage Storage @relation(fields: [storageId], references: [id])
  Moment  Moment  @relation(fields: [momentId], references: [id])

  @@unique([storageId, momentId])
  @@index([storageId])
}
