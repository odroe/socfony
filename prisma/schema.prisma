// Copyright (c) 2021, Odroe Inc. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.
//------------------------------------------------------------------------------
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String  @id @db.Char(64)
  username String? @unique @db.VarChar(100)
  email    String? @unique @db.VarChar(100)
  phone    String? @unique @db.VarChar(100)
  password String?

  /// The user published moments
  moments Moment[]

  /// The user created access tokens.
  accessToken AccessToken[]

  /// The user profile
  profile UserProfile?

  /// The user liked one to many moments
  liked LikeOnMoment[]

  /// The user published one to many comments.
  comments Comment[]

  /// The user uploaded storages.
  storages Storage[]

  /// Following
  following FollowOnUser[] @relation(name: "follow:owner")

  /// Followers
  followers FollowOnUser[] @relation(name: "user:target")

  @@index([username])
  @@index([email])
  @@index([phone])
}

model FollowOnUser {
  ownerId   String   @db.Char(64)
  targetId  String   @db.Char(64)
  createdAt DateTime @default(now()) @db.Timestamp

  owner  User @relation(name: "follow:owner", fields: [ownerId], references: [id])
  target User @relation(name: "user:target", fields: [targetId], references: [id])

  @@id([ownerId, targetId])
}

model AccessToken {
  token            String   @id @db.Char(128)
  ownerId          String   @db.Char(64)
  createdAt        DateTime @default(now()) @db.Timestamp
  expiredAt        DateTime @db.Timestamp
  refreshExpiredAt DateTime @db.Timestamp

  /// The access token belongs to user.
  owner User @relation(fields: [ownerId], references: [id])

  @@index([createdAt])
  @@index([expiredAt])
  @@index([refreshExpiredAt])
}

model OneTimePassword {
  target    String   @db.VarChar(100)
  password  String   @db.VarChar(100)
  createdAt DateTime @default(now()) @db.Timestamp
  expiredAt DateTime @db.Timestamp

  @@id([target, password])
  @@index([expiredAt])
}

enum UserGender {
  UNKNOWN
  WOMAN
  MAN
}

model UserProfile {
  ownerId         String     @id @db.Char(64)
  avatarStorageId String?    @unique @db.Char(64)
  bio             String?    @db.Text
  gender          UserGender @default(UNKNOWN)
  birthday        Int?       @db.Integer

  owner  User     @relation(fields: [ownerId], references: [id])
  avatar Storage? @relation(fields: [avatarStorageId], references: [id])

  @@index([avatarStorageId])
  @@index([gender])
  @@index([birthday])
}

model Moment {
  id          String   @id @db.Char(64)
  publisherId String   @db.Char(64)
  title       String?  @db.VarChar(255)
  content     String?  @db.Text
  createdAt   DateTime @default(now()) @db.Timestamp

  /// The moment has one to many images storage.
  storages StorageOnMoment[]

  /// The moment belongs to user.
  publisher User @relation(fields: [publisherId], references: [id])

  /// The moment likers, moment many to many users.
  likers LikeOnMoment[]

  /// The moment comments.
  comments CommentOnMoment[]

  @@index([createdAt])
  @@index([publisherId])
  @@index([title])
}

model LikeOnMoment {
  userId    String   @db.Char(64)
  momentId  String   @db.Char(64)
  createdAt DateTime @default(now()) @db.Timestamp

  /// The like belongs to user.
  user User @relation(fields: [userId], references: [id])

  /// The like belongs to moment.
  moment Moment @relation(fields: [momentId], references: [id])

  @@id([userId, momentId])
  @@index([createdAt])
}

model Comment {
  id          String   @id @db.Char(64)
  content     String   @db.Text
  publisherId String   @db.Char(64)
  createdAt   DateTime @default(now()) @db.Timestamp

  /// The comment belongs to user.
  publisher User @relation(fields: [publisherId], references: [id])

  /// The comment belongs to moment.
  moments CommentOnMoment[]

  @@index([createdAt])
  @@index([publisherId])
}

model CommentOnMoment {
  commentId String @id @db.Char(64)
  momentId  String @db.Char(64)

  /// Belongs to moment.
  moment Moment @relation(fields: [momentId], references: [id])

  /// Belongs to comment.
  comment Comment @relation(fields: [commentId], references: [id])

  @@unique([commentId, momentId])
  @@index([commentId])
}

model Storage {
  id        String   @id @db.Char(64)
  location  String   @unique
  isUsed    Boolean  @default(false)
  createdAt DateTime @default(now()) @db.Timestamp
  ownerId   String   @db.Char(64)

  /// The storage belongs to user.
  owner User @relation(fields: [ownerId], references: [id])

  /// The storage image belongs to moment.
  moment StorageOnMoment?

  /// User profile used to avatar
  userProfile UserProfile?

  @@index([isUsed])
  @@index([ownerId])
}

model StorageOnMoment {
  storageId String @id @db.Char(64)
  momentId  String @db.Char(64)

  storage Storage @relation(fields: [storageId], references: [id])
  moment  Moment  @relation(fields: [momentId], references: [id])

  @@unique([storageId, momentId])
  @@index([storageId])
}

/// resource count.
model ResourceCount {
  type     String
  targetId String
  count    Int    @default(0) @db.Integer

  @@id([type, targetId])
  @@index([count])
}
