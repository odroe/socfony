// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../lib"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// Cognitive gender
enum Gender {
  woman
  main
  unknown
}

/// User model
model User {
  id           String               @id @db.Char(64)
  phone        String               @unique @db.VarChar(50)
  name         String?              @unique @db.VarChar(100)
  gender       Gender               @default(unknown)
  avatar       String?              @db.VarChar(255)
  bio          String?              @db.Text
  birthday     Int?
  registeredAt DateTime             @default(now()) @db.Timestamptz()
  accessTokens AccessToken[]
  moments      Moment[]
  favorites    UserFavoriteMoment[]

  @@index([birthday])
  @@index([registeredAt])
  @@index([gender])
}

/// User access token
model AccessToken {
  token            String   @id @db.Char(128)
  createdAt        DateTime @default(now()) @db.Timestamptz()
  expiredAt        DateTime @db.Timestamptz()
  refreshExpiredAt DateTime @db.Timestamptz()
  ownerId          String   @db.Char(64)
  owner            User     @relation(fields: [ownerId], references: [id])

  @@index([ownerId])
}

/// Phone sent code
model PhoneSentCode {
  phone     String   @db.VarChar(50)
  code      String   @db.VarChar(10)
  createdAt DateTime @default(now()) @db.Timestamptz()
  expiredAt DateTime @db.Timestamptz()

  @@id([phone, code])
  @@index([phone])
  @@index([code])
}

model Moment {
  id            String               @id @db.Char(64)
  title         String?              @db.VarChar(180)
  content       String?              @db.Text
  images        String[]             @default([])
  createdAt     DateTime             @default(now()) @db.Timestamptz()
  likersCount   Int                  @default(0)
  commentsCount Int                  @default(0)
  userId        String               @db.Char(64)
  user          User                 @relation(fields: [userId], references: [id])
  favorites     UserFavoriteMoment[]

  @@index([userId])
  @@index([createdAt])
  @@map("moments")
}

/// User favorite moment
model UserFavoriteMoment {
  userId     String   @db.Char(64)
  user       User     @relation(fields: [userId], references: [id])
  momentId   String   @db.Char(64)
  moment     Moment   @relation(fields: [momentId], references: [id])
  favoriteAt DateTime @default(now()) @db.Timestamptz()

  @@id([userId, momentId])
}
