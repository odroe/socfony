import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:numeral/ext.dart';
import 'package:socfonyapis/socfonyapis.dart';

import '../../auth/auth_provider.dart';
import '../user_providers.dart';

class UserProfileDataCard extends StatelessWidget {
  const UserProfileDataCard(this.userId, {super.key});

  /// Current profile user ID.
  final String userId;

  @override
  Widget build(BuildContext context) {
    return SliverToBoxAdapter(
      child: Card(
        margin: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
        child: _CardContent(userId),
      ),
    );
  }
}

/// Card content.
class _CardContent extends StatelessWidget {
  const _CardContent(this.userId);

  /// Current profile user ID.
  final String userId;

  @override
  Widget build(BuildContext context) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        _AvatarAndCountAndAutoGeneratedButton(userId),
        _UserBaseDataTile(userId),
      ],
    );
  }
}

class _UserBaseDataTile extends StatelessWidget {
  const _UserBaseDataTile(this.userId, {Key? key}) : super(key: key);

  final String userId;

  @override
  Widget build(BuildContext context) {
    return ListTile(
      title: _UserBaseDataTitle(userId),
      subtitle: _Bio(userId),
    );
  }
}

class _Bio extends ConsumerWidget {
  const _Bio(this.userId, {Key? key}) : super(key: key);

  final String userId;

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    // Create user bio provider.
    final AlwaysAliveProviderListenable<String?> bioProvider =
        createUserProvider(userId).select((value) => value?.bio);

    // Watch user bio.
    final String? bio = ref.watch(bioProvider);

    return Text(
      bio == null || bio.isEmpty ? '该用户很懒，没有写简介。' : bio,
      style: Theme.of(context).textTheme.bodyMedium,
      maxLines: 3,
      overflow: TextOverflow.ellipsis,
    );
  }
}

class _UserBaseDataTitle extends StatelessWidget {
  const _UserBaseDataTitle(this.userId, {Key? key}) : super(key: key);

  final String userId;

  @override
  Widget build(BuildContext context) {
    return Row(
      children: [
        Expanded(child: _Username(userId)),
        const SizedBox(width: 8),
        _GenderAndAge(userId),
      ],
    );
  }
}

/// User gender & age.
class _GenderAndAge extends StatelessWidget {
  const _GenderAndAge(this.userId, {Key? key}) : super(key: key);

  final String userId;

  @override
  Widget build(BuildContext context) {
    return Chip(
      avatar: _GenderIcon(userId),
      label: _AgeLabel(userId),
    );
  }
}

/// Age label.
class _AgeLabel extends ConsumerWidget {
  const _AgeLabel(this.userId, {Key? key}) : super(key: key);

  final String userId;

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    // Create birthday provider.
    final AlwaysAliveProviderListenable<int?> birthdayProvider =
        createUserProvider(userId).select((value) => value?.birthday);

    // Watch birthday provider.
    final int? birthday = ref.watch(birthdayProvider);

    return Text('${_age(birthday)}岁');
  }

  /// Translate birthday to age.
  ///
  /// The [birthday] formeted is '19931220'.
  String _age(int? birthday) {
    // If birthday is null, or length not same as 8, return '0'.
    if (birthday == null || birthday.toString().length != 8) return '0';

    // Birthday is formatted as '19931220', so transform it to DateTime.
    final DateTime date =
        DateTime(birthday ~/ 10000, (birthday ~/ 100) % 100, birthday % 100);

    // Calculate age.
    final Duration age = DateTime.now().difference(date);

    // Return age.
    return (age.inDays ~/ 365).toString();
  }
}

/// Gender icon.
class _GenderIcon extends ConsumerWidget {
  const _GenderIcon(this.userId, {Key? key}) : super(key: key);

  final String userId;

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    // Create gender provider.
    final AlwaysAliveProviderListenable<User_Gender> genderProvider =
        createUserProvider(userId)
            .select((value) => value?.gender ?? User_Gender.unknown);

    // Watch user gender
    final User_Gender gender = ref.watch(genderProvider);

    // If gender is man
    if (gender == User_Gender.man) {
      return const Icon(Icons.male, color: Colors.blueAccent);

      // If gender is woman
    } else if (gender == User_Gender.woman) {
      return const Icon(Icons.female, color: Colors.pinkAccent);
    }

    return const Icon(Icons.transgender);
  }
}

/// Username.
class _Username extends ConsumerWidget {
  const _Username(this.userId, {Key? key}) : super(key: key);

  final String userId;

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    // Create username provider.
    final AlwaysAliveProviderListenable<String> usernameProvider =
        createUserProvider(userId).select((value) => value?.name ?? '');

    // Watch username provider.
    final String username = ref.watch(usernameProvider);

    return Text(
      username.isNotEmpty ? username : userId,
      style: Theme.of(context).textTheme.titleLarge,
      maxLines: 1,
      overflow: TextOverflow.ellipsis,
    );
  }
}

/// Avatar & count & auto generated button.
class _AvatarAndCountAndAutoGeneratedButton extends StatelessWidget {
  const _AvatarAndCountAndAutoGeneratedButton(this.userId);

  /// Current profile user ID.
  final String userId;

  @override
  Widget build(BuildContext context) {
    return Padding(
      padding: const EdgeInsets.all(16).copyWith(bottom: 6),
      child: Row(
        children: [
          _Avatar(userId),
          const SizedBox(width: 16),
          _CountAndAutoGeneratedButton(userId),
        ],
      ),
    );
  }
}

/// Avatar.
class _Avatar extends StatelessWidget {
  const _Avatar(this.userId);

  /// Current profile user ID.
  final String userId;

  @override
  Widget build(BuildContext context) {
    // TODO: implement avatar
    return const CircleAvatar(radius: 36);
  }
}

/// Count & auto generated button.
class _CountAndAutoGeneratedButton extends StatelessWidget {
  const _CountAndAutoGeneratedButton(this.userId);

  /// Current profile user ID.
  final String userId;

  @override
  Widget build(BuildContext context) {
    return Expanded(
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.stretch,
        children: [
          _Count(userId),
          const SizedBox(height: 8),
          _AutoGeneratedButton(userId),
        ],
      ),
    );
  }
}

/// Count.
class _Count extends StatelessWidget {
  const _Count(this.userId);

  /// Current profile user ID.
  final String userId;

  @override
  Widget build(BuildContext context) {
    return Row(
      mainAxisAlignment: MainAxisAlignment.spaceAround,
      children: [
        _LikedCount(userId),
        _FollowingCount(userId),
        _FollowerCount(userId),
      ],
    );
  }
}

/// Auto generated button.
class _AutoGeneratedButton extends ConsumerWidget {
  const _AutoGeneratedButton(this.userId);

  /// Current profile user ID.
  final String userId;

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    // If the profile user same as current authenticated user,
    // then show edit user data button.
    if (authenticatedProvider.same(ref.watch, userId)) {
      return const _EditUserDataButton();
    }

    return _AutoFollowButton(userId);
  }
}

/// Liked count.
class _LikedCount extends StatelessWidget {
  const _LikedCount(this.userId);

  /// Current profile user ID.
  final String userId;

  @override
  Widget build(BuildContext context) {
    // TODO: implement liked count
    const int likedCount = 10000;

    return const _CountDisplay(count: likedCount, text: '获赞');
  }
}

/// Following count.
class _FollowingCount extends StatelessWidget {
  const _FollowingCount(this.userId);

  /// Current profile user ID.
  final String userId;

  @override
  Widget build(BuildContext context) {
    // Fetch following count.
    const int followingCount = 76;

    return const _CountDisplay(count: followingCount, text: '关注');
  }
}

/// Follower count.
class _FollowerCount extends StatelessWidget {
  const _FollowerCount(this.userId);

  /// Current profile user ID.
  final String userId;

  @override
  Widget build(BuildContext context) {
    // TODO: Fetch user follower count.
    return const _CountDisplay(count: 1024, text: '粉丝');
  }
}

/// Count display.
class _CountDisplay extends StatelessWidget {
  const _CountDisplay({
    required this.count,
    required this.text,
  });

  /// Count.
  final int count;

  /// Text.
  final String text;

  @override
  Widget build(BuildContext context) {
    // Text theme.
    final TextTheme textTheme = Theme.of(context).textTheme;

    return Text.rich(TextSpan(
      children: [
        TextSpan(
          text: count.numeral(fractionDigits: 2),
          style: textTheme.titleMedium,
        ),
        const TextSpan(text: ' '),
        TextSpan(
          text: text,
          style: textTheme.bodySmall,
        ),
      ],
    ));
  }
}

/// Edit user data button.
class _EditUserDataButton extends StatelessWidget {
  const _EditUserDataButton();

  @override
  Widget build(BuildContext context) {
    return TextButton.icon(
      icon: const Icon(Icons.edit),
      label: const Text('编辑资料'),
      onPressed: () {
        // TODO: implement edit user data button
      },
    );
  }
}

/// Auto follow button.
class _AutoFollowButton extends StatelessWidget {
  const _AutoFollowButton(this.userId);

  /// Current profile user ID.
  final String userId;

  @override
  Widget build(BuildContext context) {
    // TODO: 需要实现获取关注状态，并且判断。
    return OutlinedButton.icon(
      icon: const Icon(Icons.add_reaction),
      label: const Text('关注'),
      onPressed: () {},
    );
  }
}
