import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';

import 'account_phone_provider.dart';

/// Update account phone screen.
class UpdateAccountPhoneScreen extends StatelessWidget {
  const UpdateAccountPhoneScreen({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        centerTitle: true,
        title: const _AutoGeneratedText(),
        actions: const [_SubmitButton()],
      ),
      body: ListView(
        children: const <Widget>[
          SizedBox(height: 24),
          _CurrentPhoneOneTimePassword(),
          _NewPhoneTextField(),
        ],
      ),
    );
  }
}

/// Current phone one-time password.
final AutoDisposeStateProvider<String?> _currentPhoneOtpProvider =
    StateProvider.autoDispose<String?>((ref) => null);

/// New phone editting controller provider.
final AutoDisposeChangeNotifierProvider<TextEditingController>
    _newPhoneEdittingControllerProvider =
    ChangeNotifierProvider.autoDispose<TextEditingController>(
        (Ref ref) => TextEditingController());

class _AutoGeneratedText extends ConsumerWidget {
  const _AutoGeneratedText({
    Key? key,
  }) : super(key: key);

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    // Watch current phone.
    final String? phone = ref.watch(accountPhoneProvider);

    // If phone is null, return set phone text.
    if (phone == null) {
      return const Text('设置手机号码');
    }

    return const Text('更换手机号码');
  }
}

/// Current phone one-time passwod
class _CurrentPhoneOneTimePassword extends ConsumerWidget {
  const _CurrentPhoneOneTimePassword({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    // Watch current phone.
    final String? phone = ref.watch(accountPhoneProvider);

    // If phone is null, return empty widget.
    if (phone == null) {
      return const SizedBox();
    }

    return ListTile(
      title: Text(phone),
      subtitle: const Text('验证当前手机号码，以便更换手机号码'),
      trailing: TextButton(
        child: const Text('验证'),
        onPressed: () {},
      ),
    );
  }
}

/// New phone text field.
class _NewPhoneTextField extends ConsumerWidget {
  const _NewPhoneTextField({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    return Padding(
      padding: const EdgeInsets.symmetric(horizontal: 16),
      child: TextField(
        autofocus: true,
        controller: ref.watch(_newPhoneEdittingControllerProvider),
        decoration: const InputDecoration(
          labelText: '新手机号码',
          hintText: '请输入新手机号码',
          helperText: '新手机号码绑定成功后，将作为你登录的唯一凭据。',
        ),
        keyboardType: TextInputType.number,
        inputFormatters: [
          // Only [0-9] input formatter.
          FilteringTextInputFormatter.digitsOnly,
        ],
      ),
    );
  }
}

/// Submit button.
class _SubmitButton extends ConsumerWidget {
  const _SubmitButton({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    // Button on pressed handler.
    VoidCallback? onPressed;
    if (ref.watch(_newPhoneEdittingControllerProvider).text.isNotEmpty) {
      onPressed = () {};
    }

    return Center(
      child: TextButton(
        onPressed: onPressed,
        child: const Text('下一步'),
      ),
    );
  }
}
