import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:grpc/grpc.dart';
import 'package:socfonyapis/socfonyapis.dart';

import '../../otp/otp_dialog.dart';
import '../../socfony_service.dart';
import '../user_providers.dart';
import 'account_phone_provider.dart';

/// Update account phone screen.
class UpdateAccountPhoneScreen extends StatelessWidget {
  const UpdateAccountPhoneScreen({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        centerTitle: true,
        title: const _AutoGeneratedText(),
        actions: const [_SubmitButton()],
      ),
      body: ListView(
        children: const <Widget>[
          SizedBox(height: 24),
          _CurrentPhoneOneTimePassword(),
          _NewPhoneTextField(),
        ],
      ),
    );
  }
}

/// Current phone one-time password.
final AutoDisposeStateProvider<String?> _currentPhoneOtpProvider =
    StateProvider.autoDispose<String?>((ref) => null);

/// New phone editting controller provider.
final AutoDisposeChangeNotifierProvider<TextEditingController>
    _newPhoneEdittingControllerProvider =
    ChangeNotifierProvider.autoDispose<TextEditingController>(
        (Ref ref) => TextEditingController());

/// Submiting provider.
final AutoDisposeStateProvider<bool> _isSubmittingProvider =
    StateProvider.autoDispose<bool>((ref) => false);

class _AutoGeneratedText extends ConsumerWidget {
  const _AutoGeneratedText({
    Key? key,
  }) : super(key: key);

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    // Watch current phone.
    final String? phone = ref.watch(accountPhoneProvider);

    // If phone is null, return set phone text.
    if (phone == null) {
      return const Text('设置手机号码');
    }

    return const Text('更换手机号码');
  }
}

/// Current phone one-time passwod
class _CurrentPhoneOneTimePassword extends ConsumerWidget {
  const _CurrentPhoneOneTimePassword({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    // Watch current phone.
    final String? phone = ref.watch(accountPhoneProvider);

    // If phone is null, return empty widget.
    if (phone == null) {
      return const SizedBox();
    }

    return ListTile(
      title: Text(phone),
      subtitle: const _CurrentOtpVerifyText(),
      trailing: TextButton(
        child: const _CurrentPhoneVerifyButton(),
        onPressed: () => _showDialog(context, ref.read),
      ),
    );
  }

  /// SHow current phone one-time password dialog.
  void _showDialog(BuildContext context, Reader reader) async {
    // If is submitting, return.
    if (reader(_isSubmittingProvider)) {
      return;
    }

    final String phone = reader(accountPhoneProvider)!;
    final String? otp = await showOtpVerificationDialog(
      context,
      reader,
      phone: phone,
      title: '验证当前手机号码',
      description: '验证码已发送到 $phone',
    );

    // Update current phone one-time password.
    reader(_currentPhoneOtpProvider.state).state = otp;
  }
}

class _CurrentOtpVerifyText extends ConsumerWidget {
  const _CurrentOtpVerifyText({
    Key? key,
  }) : super(key: key);

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    // Get current phone one-time password.
    final String? otp = ref.watch(_currentPhoneOtpProvider);

    // If otp is null, or otp is empty.
    if (otp == null || otp.isEmpty) {
      return const Text('验证当前手机号码，以便更换手机号码');
    }

    return Text('验证通过，验证码：$otp');
  }
}

class _CurrentPhoneVerifyButton extends ConsumerWidget {
  const _CurrentPhoneVerifyButton({
    Key? key,
  }) : super(key: key);

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    // Get current phone one-time password.
    final String? otp = ref.watch(_currentPhoneOtpProvider);

    // If OTP is null or is empty, return verify text.
    if (otp == null || otp.isEmpty) {
      return const Text('验证');
    }

    return const Text('重新验证');
  }
}

/// New phone text field.
class _NewPhoneTextField extends ConsumerWidget {
  const _NewPhoneTextField({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    return Padding(
      padding: const EdgeInsets.symmetric(horizontal: 16),
      child: TextField(
        autofocus: true,
        readOnly: ref.watch(_isSubmittingProvider),
        controller: ref.watch(_newPhoneEdittingControllerProvider),
        decoration: const InputDecoration(
          labelText: '新手机号码',
          hintText: '请输入新手机号码',
          helperText: '新手机号码绑定成功后，将作为你登录的唯一凭据。',
        ),
        keyboardType: TextInputType.number,
        inputFormatters: [
          // Only [0-9] input formatter.
          FilteringTextInputFormatter.digitsOnly,
        ],
      ),
    );
  }
}

/// Submit button.
class _SubmitButton extends ConsumerStatefulWidget {
  const _SubmitButton({Key? key}) : super(key: key);

  @override
  ConsumerState<_SubmitButton> createState() => _SubmitButtonState();
}

class _SubmitButtonState extends ConsumerState<_SubmitButton> {
  @override
  Widget build(BuildContext context) {
    // Button on pressed handler.
    VoidCallback? onPressed;
    if (ref.watch(_newPhoneEdittingControllerProvider).text.isNotEmpty &&
        !ref.watch(_isSubmittingProvider)) {
      onPressed = _onSubmitButtonPressed;
    }

    return Center(
      child: TextButton(
        onPressed: onPressed,
        child: const Text('下一步'),
      ),
    );
  }

  /// On submit button pressed.
  void _onSubmitButtonPressed() async {
    // Set is submitting.
    ref.read(_isSubmittingProvider.state).state = true;

    // has current phone one-time password.
    final hasCurrentPhoneVerified = _hasCurrentPhoneVerified();
    if (!hasCurrentPhoneVerified) {
      // set submitting false.
      ref.read(_isSubmittingProvider.state).state = false;

      // Show error dialog.
      return _showAlertDialog('请先验证当前绑定的手机号码');
    }

    // has new phone one-time password.
    final String newPhone = ref.read(_newPhoneEdittingControllerProvider).text;
    final String? newPhoneOtp = await showOtpVerificationDialog(
      context,
      ref.read,
      phone: newPhone,
      title: '验证新手机号码',
      description: '验证码已发送到 $newPhone',
      buttonText: '完成',
    );

    // If new phone one-time password is null, return.
    if (newPhoneOtp == null) {
      // set submitting false.
      ref.read(_isSubmittingProvider.state).state = false;
      return;
    }

    // Update new phone one-time password.
    try {
      final UserNewPhoneMessage message = UserNewPhoneMessage()
        ..phone = newPhone
        ..otp = newPhoneOtp;
      final User user =
          await socfonyService.updateUserPhone(UpdateUserPhoneRequest()
            ..otp = ref.read(_currentPhoneOtpProvider)!
            ..current = message);
      user.save(ref.read);

      // Back to previous screen.
      if (mounted) {
        Navigator.pop(context);
      }
    } catch (e) {
      // set submitting false.
      ref.read(_isSubmittingProvider.state).state = false;
      return _showAlertDialog(e is GrpcError ? e.message! : '未知错误');
    }
  }

  // has current phone one-time password.
  bool _hasCurrentPhoneVerified() {
    final String? currentPhone = ref.read(accountPhoneProvider);
    final String? currentOtp = ref.read(_currentPhoneOtpProvider);
    return currentPhone != null && currentOtp != null;
  }

  /// show alert dialog.
  void _showAlertDialog(String message) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('提示'),
        content: Text(message),
        actions: <Widget>[
          TextButton(
            child: const Text('知道了'),
            onPressed: () => Navigator.pop(context),
          ),
        ],
      ),
    );
  }
}
